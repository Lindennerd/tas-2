generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String           @id @default(cuid())
  name           String?
  email          String?          @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  Answer         Answer[]
  Asset          Asset[]
  AssetUpdate    AssetUpdate[]
  Attachment     Attachment[]
  Comment        Comment[]
  Document       Document[]
  DocumentUpdate DocumentUpdate[]
  Manifest       Manifest[]
  ManifestUpdate ManifestUpdate[]
  sessions       Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Asset {
  id          String        @id @default(cuid())
  name        String
  description String
  url         String?
  userId      String
  createdAt   DateTime      @default(now())
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  AssetUpdate AssetUpdate[]
  Manifest    Manifest[]
}

model AssetUpdate {
  id        String   @id @default(cuid())
  assetId   String
  userId    String
  updatedAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  asset     Asset    @relation(fields: [assetId], references: [id], onDelete: Cascade)
}

model Option {
  id          String   @id @default(cuid())
  description String
  default     Boolean  @default(false)
  questionId  String
  question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model Extensions {
  id          String   @id @default(cuid())
  description String
  default     Boolean  @default(false)
  questionId  String
  question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model Question {
  id          String       @id @default(cuid())
  description String
  help        String?
  type        String
  weight      Int
  sectionId   String?
  Section     Section?     @relation(fields: [sectionId], references: [id])
  Answer      Answer[]
  Extensions  Extensions[]
  Option      Option[]
  Comment     Comment[]
}

model Section {
  id          String     @id @default(cuid())
  name        String
  description String
  manifestId  String?
  documentId  String?
  required    Boolean    @default(false)
  Document    Document?  @relation(fields: [documentId], references: [id])
  Manifest    Manifest?  @relation(fields: [manifestId], references: [id])
  questions   Question[]
}

model Manifest {
  id             String           @id @default(cuid())
  assetId        String
  userId         String
  createdAt      DateTime         @default(now())
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  asset          Asset            @relation(fields: [assetId], references: [id], onDelete: Cascade)
  Answer         Answer[]
  Attachment     Attachment[]
  ManifestUpdate ManifestUpdate[]
  sections       Section[]
  Comment        Comment[]
}

model ManifestUpdate {
  id         String   @id @default(cuid())
  manifestId String
  userId     String
  updatedAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  manifest   Manifest @relation(fields: [manifestId], references: [id], onDelete: Cascade)
}

model Attachment {
  id          String   @id @default(cuid())
  name        String
  description String
  url         String?
  userId      String
  manifestId  String
  createdAt   DateTime @default(now())
  manifest    Manifest @relation(fields: [manifestId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Answer {
  id         String    @id @default(cuid())
  value      String
  questionId String
  manifestId String
  createdAt  DateTime  @default(now())
  userId     String
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  manifest   Manifest  @relation(fields: [manifestId], references: [id], onDelete: Cascade)
  question   Question  @relation(fields: [questionId], references: [id], onDelete: Cascade)
  Comment    Comment[]
}

model Comment {
  id         String   @id @default(cuid())
  value      String
  question   Question @relation(fields: [questionId], references: [id])
  manifest   Manifest @relation(fields: [manifestId], references: [id])
  approved   Boolean  @default(false)
  createdAt  DateTime @default(now())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  Answer     Answer?  @relation(fields: [answerId], references: [id])
  answerId   String?
  questionId String
  manifestId String
}

model Document {
  id             String           @id @default(cuid())
  name           String
  description    String
  userId         String
  createdAt      DateTime         @default(now())
  creator        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  DocumentUpdate DocumentUpdate[]
  sections       Section[]
}

model DocumentUpdate {
  id         String   @id @default(cuid())
  documentId String
  userId     String
  updatedAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
}
