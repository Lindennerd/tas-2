// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// generator trpc {
//   provider       = "prisma-trpc-generator"
//   withMiddleware = true
//   withShield     = false
//   contextPath    = "../src/server/router/context.ts"
// }

// generator erd {
//   provider = "prisma-erd-generator"
// }

datasource db {
  provider = "sqlite"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.text annotations in model Account below
  // Further reading: 
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? //@db.Text
  access_token      String? //@db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? //@db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String           @id @default(cuid())
  name           String?
  email          String?          @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  Asset          Asset[]
  AssetUpdate    AssetUpdate[]
  Manifest       Manifest[]
  ManifestUpdate ManifestUpdate[]
  Attachment     Attachment[]
  Answer         Answer[]
  Comment        Comment[]
  Document       Document[]
  DocumentUpdate DocumentUpdate[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Asset {
  id          String        @id @default(cuid())
  name        String
  description String
  url         String?
  userId      String
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime      @default(now())
  AssetUpdate AssetUpdate[]
  Manifest    Manifest[]
}

model AssetUpdate {
  id        String   @id @default(cuid())
  asset     Asset    @relation(fields: [assetId], references: [id], onDelete: Cascade)
  assetId   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  updatedAt DateTime @default(now())
}

model Option {
  id          String   @id @default(cuid())
  help        String?
  description String
  default     Boolean  @default(false)
  question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId  String
}

model Extensions {
  id          String   @id @default(cuid())
  description String
  default     Boolean  @default(false)
  question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId  String
}

model Question {
  id          String       @id @default(cuid())
  description String
  help        String?
  type        String
  weight      Int
  Section     Section?     @relation(fields: [sectionId], references: [id])
  sectionId   String?
  Answer      Answer[]
  Option      Option[]
  Extensions  Extensions[]
}

model Section {
  id          String     @id @default(cuid())
  name        String
  description String?
  questions   Question[]
  Manifest    Manifest?  @relation(fields: [manifestId], references: [id])
  manifestId  String?
  Document    Document?  @relation(fields: [documentId], references: [id])
  documentId  String?
}

model Manifest {
  id             String           @id @default(cuid())
  asset          Asset            @relation(fields: [assetId], references: [id], onDelete: Cascade)
  assetId        String
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  sections       Section[]
  createdAt      DateTime         @default(now())
  ManifestUpdate ManifestUpdate[]
  Attachment     Attachment[]
  Answer         Answer[]
}

model ManifestUpdate {
  id         String   @id @default(cuid())
  manifest   Manifest @relation(fields: [manifestId], references: [id], onDelete: Cascade)
  manifestId String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  updatedAt  DateTime @default(now())
}

model Attachment {
  id          String   @id @default(cuid())
  name        String
  description String
  url         String?
  userId      String
  manifestId  String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  manifest    Manifest @relation(fields: [manifestId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
}

model Answer {
  id         String    @id @default(cuid())
  value      String
  question   Question  @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String
  manifest   Manifest  @relation(fields: [manifestId], references: [id], onDelete: Cascade)
  manifestId String
  createdAt  DateTime  @default(now())
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  Comment    Comment[]
}

model Comment {
  id        String   @id @default(cuid())
  value     String
  answer    Answer   @relation(fields: [answerId], references: [id], onDelete: Cascade)
  answerId  String
  approved  Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
}

model Document {
  id             String           @id @default(cuid())
  name           String
  description    String
  userId         String
  creator        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt      DateTime         @default(now())
  sections       Section[]
  DocumentUpdate DocumentUpdate[]
}

model DocumentUpdate {
  id         String   @id @default(cuid())
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  documentId String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  updatedAt  DateTime @default(now())
}
